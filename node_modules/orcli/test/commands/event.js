var event = require('../../lib-cov/commands/event');
var nock = require('nock');
var OIO_URL = 'https://api.orchestrate.io';
var assert = require('assert');

describe('event', function () {
  afterEach(function () {
    nock.cleanAll();
  });

  it('should list events', function (done) {
    var scope = nock(OIO_URL)
    .get('/v0/users/garbados/events/timeline')
    .reply(200);

    event(['users', 'garbados', 'timeline'], {})
    .then(function () {
      assert(scope.isDone());
      done();
    })
    .fail(done);
  });

  it('should get an event', function (done) {
    var scope = nock(OIO_URL)
    .get('/v0/users/garbados/events/timeline/1/2')
    .reply(200);

    event(['users', 'garbados', 'timeline', 1, 2], {})
    .then(function () {
      assert(scope.isDone());
      done();
    })
    .fail(done);
  });

  it('should create an event', function (done) {
    var scope = nock(OIO_URL)
    .post('/v0/users/garbados/events/timeline', {
      marked: true
    })
    .reply(201);

    event(['users', 'garbados', 'timeline', 'create'], {
      marked: true
    })
    .then(function () {
      assert(scope.isDone());
      done();
    })
    .fail(done);
  });

  it('should update an event', function (done) {
    var scope = nock(OIO_URL)
    .put('/v0/users/garbados/events/timeline/1/2', {
      marked: true
    })
    .reply(201);

    event(['users', 'garbados', 'timeline', 'update', 1, 2], {
      marked: true
    })
    .then(function () {
      assert(scope.isDone());
      done();
    })
    .fail(done);
  });

  it('should delete an event', function (done) {
    var scope = nock(OIO_URL)
    .delete('/v0/users/garbados/events/timeline/1/2?purge=true')
    .reply(201);

    event(['users', 'garbados', 'timeline', 'delete', 1, 2])
    .then(function () {
      assert(scope.isDone());
      done();
    })
    .fail(done);
  });
});
