// parses argv into 
// * sequential arguments
// * cli flags
// * command flags

var YARG_FIELDS = ['$0', '_'];
var CLI_FLAGS = ['head', 'verbose', 'silent', 'api-key'];

function parse_argv (argv) {
  return {
    arg: get_seq_args(argv),
    opt: get_cli_flags(argv),
    cmd: get_command_flags(argv)
  };
}

module.exports = parse_argv;

function get_seq_args (argv) {
  return argv._.filter(function (arg) {
    return (arg.indexOf('--') !== 0);
  });
}

function get_cli_flags (argv) {
  var flags = {};
  
  CLI_FLAGS.forEach(function (flag) {
    if (argv[flag]) flags[flag] = argv[flag] || true;
  });

  return flags;
}

function get_command_flags (argv) {
  // NOTE: splits `--field=value` at the first '='
  // so if your fields have '=' in them,
  // you're going to have problems.
  var flags = {};

  // get from argv options
  for (var field in argv) {
    var is_yarg_field = (YARG_FIELDS.indexOf(field) !== -1); 
    var is_cli_field = (CLI_FLAGS.indexOf(field) !== -1);

    if (!is_cli_field && !is_yarg_field) {
      flags[field] = argv[field];
      // TODO adjust "true" to true, etc.
    }
  }

  // get from sequential arguments
  var pattern = /--(.+?)=(.+)/g;
  argv._.forEach(function (arg) {
    if (!arg.match(pattern)) {
      return null;
    } else {
      var matches = arg.replace(pattern, function (match, p1, p2) {
        return [p1, p2];
      });
      matches.forEach(function (match) {
        flags[match[0]] = match[1];
      });
    }
  });

  return flags;
}
