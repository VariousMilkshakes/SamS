var common = require('../common');
var orchestrate = require('orchestrate');
var kew = require('kew');

var USAGE = {
  get: "orcli graph [collection] [key] get [...relations]",
  create: "orcli graph [collection] [key] create [...relations] [to_collection] [to_key]",
  delete: "orcli graph [collection] [key] delete [...relations] [to_collection] [to_key]"
};

function get_relations (db, collection, key, relations) {
  var builder = db.newGraphBuilder();
  return builder
  .get()
  .from(collection, key)
  .related.apply(builder, relations)
  ._execute(builder.method);
}

function create_relations (db, collection1, key1, relations, collection2, key2) {
  var promises = relations.map(function (relation) {
    return db.newGraphBuilder()
    .create()
    .from(collection1, key1)
    .related(relation)
    .to(collection2, key2);
  });

  return kew.all(promises);
}

function delete_relations (db, collection1, key1, relations, collection2, key2) {
  var promises = relations.map(function (relation) {
    return db.newGraphBuilder()
    .remove()
    .from(collection1, key1)
    .related(relation)
    .to(collection2, key2);
  });

  return kew.all(promises);
}

module.exports = function (args, kwargs) {
  var db = common.get_db(this.api_key);

  var collection = args[0];
  var key = args[1];
  var relations = args.slice(2);
  var end_of_relations;

  if (relations.indexOf('create') !== -1) {
    // PUT
    end_of_relations = relations.indexOf('create');
    var relations_to_create = relations.slice(0, end_of_relations);
    var create_args = relations.slice(end_of_relations + 1);
    if (create_args.length !== 2) throw new Error(USAGE.create);
    return create_relations(db, collection, key, relations_to_create, create_args[0], create_args[1]);
  } else if (relations.indexOf('delete') !== -1) {
    // DELETE
    end_of_relations = relations.indexOf('delete');
    var relations_to_delete = relations.slice(0, end_of_relations);
    var delete_args = relations.slice(end_of_relations + 1);
    if (delete_args.length !== 2) throw new Error(USAGE.delete);
    return delete_relations(db, collection, key, relations_to_delete, delete_args[0], delete_args[1]);
  } else {
    // GET
    if (relations.length === 0) throw new Error(USAGE.get);
    return get_relations(db, collection, key, relations);
  }
};
