var common = require('../common');
var orchestrate = require('orchestrate');
var kew = require('kew');

var USAGE = {
  list: "orcli event [collection] [key] [type]",
  get: "orcli event [collection] [key] [type] [timestamp] [ordinal]",
  create: "orcli event [collection] [key] [type] create (timestamp)",
  delete: "orcli event [collection] [key] [type] delete [timestamp] [ordinal]",
  update: "orcli event [collection] [key] [type] update [timestamp] [ordinal]"
};

function list_events (db, collection, key, type, kwargs) {
  var builder = db.newEventBuilder().from(collection, key).type(type);
  Object.keys(kwargs).forEach(function (kwarg) {
    if (builder[kwarg] && (typeof(builder[kwarg]) === 'function'))
      builder = builder[kwarg](kwargs[kwarg]);
  });
  return builder.list();
}

function get_event (db, collection, key, type, timestamp, ordinal) {
  return db.newEventBuilder()
  .from(collection, key)
  .type(type)
  .time(timestamp)
  .ordinal(ordinal)
  .get();
}

function create_event (db, collection, key, type, timestamp, kwargs) {
  var builder = db.newEventBuilder()
  .from(collection, key)
  .type(type);
  if (timestamp) builder = builder.time(timestamp);
  builder = builder.data(kwargs);
  return builder.create();
}

function update_event (db, collection, key, type, timestamp, ordinal, kwargs, ref) {
  var builder = db.newEventBuilder()
  .from(collection, key)
  .type(type)
  .time(timestamp)
  .ordinal(ordinal)
  .data(kwargs);
  if (ref) builder = builder.ref(ref);
  return builder.update();
}

function delete_event (db, collection, key, type, timestamp, ordinal) {
  return db.newEventBuilder()
  .from(collection, key)
  .type(type)
  .time(timestamp)
  .ordinal(ordinal)
  .remove();
}

module.exports = function (args, kwargs) {
  var db = common.get_db(this.api_key);

  var collection = args[0];
  var key = args[1];
  var type = args[2];
  var action = args[3];
  var timestamp, ordinal;

  if (['create', 'update', 'delete'].indexOf(action) === -1) {
    if (action) {
      timestamp = action;
      ordinal = args[4];
      if (!ordinal) throw new Error(USAGE.get);
      return get_event(db, collection, key, type, timestamp, ordinal, kwargs);
    } else {
      return list_events(db, collection, key, type, kwargs);
    }
  } else {
    if (action === 'create') {
      timestamp = args[4] || kwargs.timestamp;
      delete kwargs.timestamp;
      return create_event(db, collection, key, type, timestamp, kwargs);
    } else if (action === 'update') {
      timestamp = args[4];
      ordinal = args[5];
      if (!(timestamp && ordinal)) throw new Error(USAGE.update);
      // TODO refs
      return update_event(db, collection, key, type, timestamp, ordinal, kwargs);
    } else if (action === 'delete') {
      timestamp = args[4];
      ordinal = args[5];
      if (!(timestamp && ordinal)) throw new Error(USAGE.delete);
      return delete_event(db, collection, key, type, timestamp, ordinal, kwargs);
    }
  }
};