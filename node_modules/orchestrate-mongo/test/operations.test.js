var async = require('async');
var operators = require('./operators');
var setup = require('./util').setup;

var doc = operators.doc;

var teardown = function (operators, done) {
  var self = this;
  var promises = Object.keys(operators).map(function (key) {
    var operator = operators[key];
    var doc_copy = JSON.parse(JSON.stringify(doc));
    doc_copy._id = key.slice(1);
    return self.mongo_collection.remove.bind(self.mongo_collection, { _id: doc_copy._id });
  });

  async.parallel(promises, function (err) {
    if (err) throw err;

    self.mongo_db.dropCollection(self.collection, function (err) {
      self.mongo_db.close();
      done(err);
    });
  });
};

var insert_docs = function (operators, done) {
  var self = this;
  var promises = Object.keys(operators).map(function (key) {
    var operator = operators[key];
    var doc_copy = JSON.parse(JSON.stringify(doc));
    doc_copy._id = key.slice(1);
    return self.mongo_collection.insert.bind(self.mongo_collection, doc_copy);
  });

  async.parallel(promises, done);
};

var test_operators = function (operators) {
  Object.keys(operators).forEach(function (key) {
    var operator = operators[key];
    var doc_copy = JSON.parse(JSON.stringify(doc));
    doc_copy._id = key.slice(1);

    it(key, function (done) {
      this.timeout(4000);
      var self = this;

      setTimeout(function () {
        self.orc.get(self.collection, doc_copy._id)
        .then(function (res) {
          operator.result(res.body);
          done();
        });
      }, 2000);

      self.mongo_collection.update({ _id: doc_copy._id }, operator.query, function (err, results) {
        if (err) throw err;
      });
    });
  });
};

[
  'update_operators',
  // 'array_operators',
  // 'update_modifiers',
  // 'bitwise_operators',
  // 'isolation_modifiers'
].forEach(function (key) {
  describe(key, function () {
    before(function (done) {
      setup.call(this, done);
    });

    after(function (done) {
      teardown.call(this, operators[key], done);
    });

    before(function (done) {
      insert_docs.call(this, operators[key], done);
    });

    test_operators(operators[key]);
  });
});
